[{"/Users/andrewkusakin/Documents/WGU/UI/src/index.tsx":"1","/Users/andrewkusakin/Documents/WGU/UI/src/reportWebVitals.ts":"2","/Users/andrewkusakin/Documents/WGU/UI/src/App.tsx":"3","/Users/andrewkusakin/Documents/WGU/UI/src/pages/guestLogin/GuestLogin.tsx":"4","/Users/andrewkusakin/Documents/WGU/UI/src/pages/dashboard/Dashboard.tsx":"5","/Users/andrewkusakin/Documents/WGU/UI/src/pages/Reports/Reports.tsx":"6","/Users/andrewkusakin/Documents/WGU/UI/src/components/signUp/SignUp.tsx":"7","/Users/andrewkusakin/Documents/WGU/UI/src/components/login/Login.tsx":"8","/Users/andrewkusakin/Documents/WGU/UI/src/components/editGallery/EditGallery.tsx":"9","/Users/andrewkusakin/Documents/WGU/UI/src/components/createGallery/CreateGallery.tsx":"10","/Users/andrewkusakin/Documents/WGU/UI/src/pages/errorPage/ErrorPage.jsx":"11","/Users/andrewkusakin/Documents/WGU/UI/src/components/galleryItem/GalleryItem.tsx":"12"},{"size":1614,"mtime":1687807369172,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1687807369172,"results":"15","hashOfConfig":"14"},{"size":2517,"mtime":1695264360967,"results":"16","hashOfConfig":"14"},{"size":3159,"mtime":1695264356103,"results":"17","hashOfConfig":"14"},{"size":2722,"mtime":1695264235344,"results":"18","hashOfConfig":"14"},{"size":4290,"mtime":1695260541714,"results":"19","hashOfConfig":"14"},{"size":2679,"mtime":1695260497631,"results":"20","hashOfConfig":"14"},{"size":2505,"mtime":1695260487559,"results":"21","hashOfConfig":"14"},{"size":4535,"mtime":1695260470917,"results":"22","hashOfConfig":"14"},{"size":3915,"mtime":1695260476966,"results":"23","hashOfConfig":"14"},{"size":439,"mtime":1687316961162,"results":"24","hashOfConfig":"14"},{"size":2050,"mtime":1695260482516,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oj3nm3",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andrewkusakin/Documents/WGU/UI/src/index.tsx",[],[],"/Users/andrewkusakin/Documents/WGU/UI/src/reportWebVitals.ts",[],[],"/Users/andrewkusakin/Documents/WGU/UI/src/App.tsx",[],[],"/Users/andrewkusakin/Documents/WGU/UI/src/pages/guestLogin/GuestLogin.tsx",["66","67","68"],[],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Picture } from \"../../components/interfaces\";\nimport \"./guestLogin.css\";\n\nexport default function GuestLogin() {\n  const { id } = useParams();\n  const [coverUrl, setCoverUrl] = useState(\"\");\n  const [galleryId, setGalleryId] = useState(\"\");\n  const [galleryName, setGalleryName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [pictures, setPictures] = useState<Picture[]>([]);\n\n  useEffect(() => {\n    axios\n      .get(`/api/v1/galleries/guestlogin/${id}`, {headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      }})\n      .then((res) => {\n        setGalleryName(res.data.name);\n        setGalleryId(res.data.id);\n        setCoverUrl(res.data.coverUrl);\n        \n      })\n      .catch((error) => {console.error(error)\n      window.location.href = \"/404\"});\n  }, []);\n\n  function onSubmit(e: { preventDefault: () => void }) {\n    e.preventDefault();\n\n    axios\n      .get(`/api/v1/galleries/viewgallery/${galleryId}`, {headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n        params: {\n          password: password,\n          email: email,\n        },\n      })\n      .then((res) => {\n        \n        setIsError(false);\n        setIsSuccess(true);\n\n        setPictures(res.data.pictures);\n\n      })\n      .catch((error) => {\n        console.error(error);\n        if (error.response) {\n          setIsError(true);\n        }\n      });\n  }\n\n  return (\n    <div>\n      <div\n        className=\"guest-login-wrapper\"\n        style={{\n          backgroundImage: `url(${coverUrl})`,\n        }}\n      >\n        <div className=\"guest-login-form\">\n          <h3 className=\"gallery-name\">{galleryName}</h3>\n          <form className=\"guest-login-form-holder\" onSubmit={onSubmit}>\n            <label>Enter your email to view this gallery.</label>\n            <input\n            className=\"input-field\"\n              type=\"email\"\n              placeholder=\"Email\"\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n            <label>\n              Enter password provided by the creator of this gallery.\n            </label>\n            <input\n            className=\"input-field\"\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n            {isError && <p>password is incorrect</p>}\n            <button className=\"submit-btn\" type=\"submit\">Enter</button>\n          </form>\n        </div>\n\n        {isSuccess && (\n          <div className=\"pictures\">\n            <h3 className=\"gallery-name\" style={{ color: \"var(--main-text-color)\"}}>{galleryName}</h3>\n            {[...pictures].reverse().map((picture) => (\n              <img src={picture.url} key={picture.id} />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/andrewkusakin/Documents/WGU/UI/src/pages/dashboard/Dashboard.tsx",[],[],"/Users/andrewkusakin/Documents/WGU/UI/src/pages/Reports/Reports.tsx",[],[],"/Users/andrewkusakin/Documents/WGU/UI/src/components/signUp/SignUp.tsx",[],[],"/Users/andrewkusakin/Documents/WGU/UI/src/components/login/Login.tsx",["69","70","71","72","73","74"],[],"import React, { useState } from \"react\";\nimport \"./login.css\";\nimport axios from \"axios\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nexport default function Login() {\n  const [businessName, setBusinessName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [authUserId, setAuthUserId] = useState();\n  const [authBusinessName, setAuthBusinessName] = useState(\"\");\n\n  const navigate = useNavigate();\n\n  const handleSubmit = (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n\n    const credentials = {\n      email: email,\n      password: password,\n    };\n\n    axios\n      .post(`/api/v1/auth/authenticate`, credentials)\n      .then((res) => {\n        \n        localStorage.setItem(\"authUserId\", res.data.userId);\n        localStorage.setItem(\"authBusinessName\", res.data.businessName);\n        localStorage.setItem(\"token\", res.data.token);\n        navigate(\"/dashboard\");\n        setIsError(false);\n      })\n      .catch((error) => {\n        console.error(error);\n        if (error.response) {\n          setIsError(true);\n        }\n      });\n  };\n\n  return (\n    <div className=\"login-wrapper\">\n      <div className=\"login-window\">\n        <Link to=\"/\" className=\"login-close\">\n          <CloseIcon fontSize=\"large\" />\n        </Link>\n\n        <h2 className=\"login-title\">Log in to VisionVault</h2>\n        <p className=\"login-subtitle\">\n          Don't have an account?{\" \"}\n          <Link to=\"/SignUp\" className=\"subtitle-signup-link\">\n            Sign up\n          </Link>\n        </p>\n        <form className=\"login-form\" onSubmit={handleSubmit}>\n          <input\n            placeholder=\"Email\"\n            autoComplete=\"username\"\n            type=\"email\"\n            className=\"input-field\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n\n          <input\n            placeholder=\"Password\"\n            type=\"password\"\n            className=\"input-field\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n          {isError && <p className=\"password-error\">Your password is incorrect or this account doesn't exist.</p>}\n\n          <button type=\"submit\" className=\"submit-btn\">\n            Login\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","/Users/andrewkusakin/Documents/WGU/UI/src/components/editGallery/EditGallery.tsx",["75","76","77","78"],[],"import React, { useEffect, useState } from \"react\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Link, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Gallery, Photo } from \"../interfaces\";\n\nexport default function EditGallery() {\n  const [photoList, setPhotoList] = useState<string[]>([]);\n  const [gallery, setGallery] = useState<Gallery>();\n  const [userId, setUserId] = useState(localStorage.getItem(\"authUserId\"));\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [photoUrl, setPhotoUrl] = useState(\"\");\n  const { id } = useParams();\n\n  const fetchGallery = async () => {\n    try {\n      const response = await axios.get(\"/api/v1/galleries/mygallery\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        params: {\n          id,\n          userId,\n        },\n      });\n      setGallery(response.data);\n      setName(response.data.name);\n      setDescription(response.data.description);\n      setPassword(response.data.password);\n      setPhotoList(response.data.pictures.map((p: Photo) => p.url));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchGallery();\n  }, []);\n\n  const addPhoto = () => {\n    setPhotoList((prevList) => [...prevList, photoUrl]);\n    setPhotoUrl(\"\");\n  };\n\n  function updateGallery(e: { preventDefault: () => void }) {\n    e.preventDefault();\n    \n    const galleryData = {\n      id,\n      userId,\n      name,\n      description,\n      password,\n      pictures: photoList,\n    };\n\n    axios\n      .put(\"/api/v1/galleries/updategallery\", galleryData, {headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }})\n      .then((res) => {\n        \n        window.location.href = \"/dashboard\";\n      })\n      .catch((error) => console.error(error));\n  }\n\n  const PhotoItem = ({ url, index }: { url: string; index: number }) => (\n    <div className=\"grid-item-photolist\">\n      <img className=\"create-gallery-photo\" src={url} alt=\"photo\" />\n      <button\n        onClick={() => setPhotoList(photoList.filter((_, i) => i !== index))}\n        className=\"delete-button\"\n      >\n        <CloseIcon className=\"close-icon-small\" fontSize=\"small\" />\n      </button>\n    </div>\n  );\n\n  return (\n    <div className=\"create-gallery-wrapper\">\n      <div className=\"create-gallery-window\">\n        <Link to=\"/dashboard\" className=\"create-gallery-close\">\n          <CloseIcon fontSize=\"large\" />\n        </Link>\n        <form className=\"create-gallery-form\" onSubmit={updateGallery}>\n          <input\n            placeholder=\"Gallery Name\"\n            autoComplete=\"username\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n            className=\"input-field\"\n          />\n\n          <input\n            placeholder=\"Description\"\n            autoComplete=\"Description\"\n            type=\"text\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            className=\"input-field\"\n          />\n          <label>\n            Incorporate a password security measure for your gallery, ensuring\n            that the gallery's content can be accessed only upon entering the\n            correct password. If you wish for your gallery to be publicly\n            accessible without the necessity of a password, simply leave the\n            password field blank.{\" \"}\n          </label>\n          <input\n            placeholder=\"Gallery Password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"input-field\"\n          />\n\n          <input\n            placeholder=\"Link to Photo\"\n            type=\"url\"\n            value={photoUrl}\n            onChange={(e) => setPhotoUrl(e.target.value)}\n            className=\"input-field\"\n          />\n          <button type=\"button\" onClick={addPhoto} className=\"submit-btn\">\n            Add Photo\n          </button>\n          <div className=\"photo-list\">\n            <div className=\"photo-list-grid\">\n              {photoList.map((photoUrl, index) => (\n                <PhotoItem key={index} url={photoUrl} index={index} />\n              ))}\n            </div>\n          </div>\n\n          <button type=\"submit\" className=\"submit-btn\">\n            Save Gallery\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","/Users/andrewkusakin/Documents/WGU/UI/src/components/createGallery/CreateGallery.tsx",["79","80"],[],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./createGallery.css\";\nimport axios from \"axios\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nexport default function CreateGallery() {\n  const [photoList, setPhotoList] = useState<string[]>([]);\n  const [photoUrl, setPhotoUrl] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const addPhoto = () => {\n    setPhotoList((prevList) => [...prevList, photoUrl]);\n    setPhotoUrl(\"\");\n  };\n\n  const deletePhoto = (index: number) => {\n    const newPhotoList = [...photoList];\n    newPhotoList.splice(index, 1);\n    setPhotoList(newPhotoList);\n  };\n\n  const userId = localStorage.getItem(\"authUserId\");\n\n  function onSubmit(e: { preventDefault: () => void }) {\n    e.preventDefault();\n\n    const galleryData = {\n      userId: userId,\n      name: name,\n      description: description,\n      password: password,\n      pictures: photoList,\n    };\n\n    axios\n      .post(\"/api/v1/galleries/creategallery\", galleryData, {headers: {\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n      }})\n      .then((res) => {\n        \n        window.location.href = \"/dashboard\";\n      })\n      .catch((error) => console.error(error));\n  }\n\n  return (\n    <div className=\"create-gallery-wrapper\">\n      <div className=\"create-gallery-window\">\n        <Link to=\"/dashboard\" className=\"create-gallery-close\">\n          <CloseIcon fontSize=\"large\" />\n        </Link>\n        <form className=\"create-gallery-form\" onSubmit={onSubmit}>\n          <input\n            placeholder=\"Gallery Name\"\n            autoComplete=\"username\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n            className=\"input-field\"\n          />\n\n          <input\n            placeholder=\"Description\"\n            autoComplete=\"Description\"\n            type=\"text\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            className=\"input-field\"\n          />\n          <label>\n            Incorporate a password security measure for your gallery, ensuring\n            that the gallery's content can be accessed only upon entering the\n            correct password.\n          </label>\n          <input\n            placeholder=\"Gallery Password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"input-field\"\n            required\n          />\n\n          <input\n            placeholder=\"Link to Photo\"\n            type=\"url\"\n            value={photoUrl}\n            onChange={(e) => setPhotoUrl(e.target.value)}\n            className=\"input-field\"\n          />\n          <button type=\"button\" onClick={addPhoto} className=\"submit-btn\">\n            Add Photo\n          </button>\n          <div className=\"photo-list\">\n            <div className=\"photo-list-grid\">\n              {photoList.map((photoUrl, index) => (\n                <div className=\"grid-item-photolist\" key={index}>\n                  <img\n                    className=\"create-gallery-photo\"\n                    src={photoUrl}\n                    alt=\"photo\"\n                  />\n                  <button\n                    onClick={() =>\n                      setPhotoList(photoList.filter((url, i) => i !== index))\n                    }\n                    className=\"delete-button\"\n                  >\n                    <CloseIcon className=\"close-icon-small\" fontSize=\"small\" />\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n                      \n          <button type=\"submit\" className=\"submit-btn\">\n            Create Gallery\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","/Users/andrewkusakin/Documents/WGU/UI/src/pages/errorPage/ErrorPage.jsx",[],[],"/Users/andrewkusakin/Documents/WGU/UI/src/components/galleryItem/GalleryItem.tsx",[],[],{"ruleId":"81","severity":1,"message":"82","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":14},{"ruleId":"85","severity":1,"message":"86","line":31,"column":6,"nodeType":"87","endLine":31,"endColumn":8,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":99,"column":15,"nodeType":"91","endLine":99,"endColumn":57},{"ruleId":"81","severity":1,"message":"92","line":8,"column":10,"nodeType":"83","messageId":"84","endLine":8,"endColumn":22},{"ruleId":"81","severity":1,"message":"93","line":8,"column":24,"nodeType":"83","messageId":"84","endLine":8,"endColumn":39},{"ruleId":"81","severity":1,"message":"94","line":12,"column":10,"nodeType":"83","messageId":"84","endLine":12,"endColumn":20},{"ruleId":"81","severity":1,"message":"95","line":12,"column":22,"nodeType":"83","messageId":"84","endLine":12,"endColumn":35},{"ruleId":"81","severity":1,"message":"96","line":13,"column":10,"nodeType":"83","messageId":"84","endLine":13,"endColumn":26},{"ruleId":"81","severity":1,"message":"97","line":13,"column":28,"nodeType":"83","messageId":"84","endLine":13,"endColumn":47},{"ruleId":"81","severity":1,"message":"98","line":9,"column":10,"nodeType":"83","messageId":"84","endLine":9,"endColumn":17},{"ruleId":"81","severity":1,"message":"99","line":10,"column":18,"nodeType":"83","messageId":"84","endLine":10,"endColumn":27},{"ruleId":"85","severity":1,"message":"100","line":40,"column":6,"nodeType":"87","endLine":40,"endColumn":8,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":72,"column":7,"nodeType":"91","endLine":72,"endColumn":69},{"ruleId":"81","severity":1,"message":"104","line":19,"column":9,"nodeType":"83","messageId":"84","endLine":19,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":102,"column":19,"nodeType":"91","endLine":106,"endColumn":21},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["105"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'businessName' is assigned a value but never used.","'setBusinessName' is assigned a value but never used.","'authUserId' is assigned a value but never used.","'setAuthUserId' is assigned a value but never used.","'authBusinessName' is assigned a value but never used.","'setAuthBusinessName' is assigned a value but never used.","'gallery' is assigned a value but never used.","'setUserId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchGallery'. Either include it or remove the dependency array.",["106"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'deletePhoto' is assigned a value but never used.",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [id]",{"range":"111","text":"112"},"Update the dependencies array to be: [fetchGallery]",{"range":"113","text":"114"},[1099,1101],"[id]",[1305,1307],"[fetchGallery]"]